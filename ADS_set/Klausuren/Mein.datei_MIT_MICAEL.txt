Inline функции в C++ предназначены для уменьшения накладных расходов при вызове функций, путем встраивания их кода прямо в место вызова. Это может улучшить производительность, особенно для маленьких функций, которые часто вызываются. Однако, компилятор может игнорировать запрос на inlining в некоторых случаях, например, если функция содержит циклы, статические переменные, является рекурсивной, или содержит операторы switch или goto.

Пример использования inline функции:

inline int cube(int s) { return s * s * s; }


Преимущества включают отсутствие накладных расходов на вызов функции, экономию времени на операции с переменными и возможность оптимизации компилятора. Однако, излишнее использование может увеличить размер исполняемого файла и потребление регистров, что негативно скажется на производительности.

В классах C++ функции, определенные внутри тела класса, являются неявно inline. Лучшей практикой является объявление прототипа функции в классе и её определение с ключевым словом inline вне класса.

Использование макросов вместо inline функций критикуется за склонность к ошибкам и ограниченную функциональность. Например, макросы не могут обращаться к приватным членам класса и не поддерживают проверку типов аргументов, в отличие от inline функций.

Пример класса с inline функциями:

class operation {
public:
    void get();
    void sum();
    // Остальные члены класса
};

inline void operation::get() {
    // Реализация
}

inline void operation::sum() {
    // Реализация
}


Inline функции следует использовать с умом, избегая их применения для функций с длительным временем выполнения, таких как операции ввода-вывода. Языки программирования Java и C# не поддерживают inline функции, но предлагают свои способы оптимизации вызовов функций.
